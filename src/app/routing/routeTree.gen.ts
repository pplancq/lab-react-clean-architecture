/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as layoutLayoutImport } from './../layout/Layout';
import { Route as pagesDemoImport } from './../pages/Demo';
import { Route as pagesHomeImport } from './../pages/Home';
import { Route as rootRoute } from './root';

// Create/Update Routes

const layoutLayoutRoute = layoutLayoutImport.update({
  id: '/_Layout',
  getParentRoute: () => rootRoute,
} as any)

const pagesDemoRoute = pagesDemoImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => layoutLayoutRoute,
} as any)

const pagesHomeRoute = pagesHomeImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => layoutLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_Layout': {
      id: '/_Layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof layoutLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_Layout/': {
      id: '/_Layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof pagesHomeImport
      parentRoute: typeof layoutLayoutImport
    }
    '/_Layout/demo': {
      id: '/_Layout/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof pagesDemoImport
      parentRoute: typeof layoutLayoutImport
    }
  }
}

// Create and export the route tree

interface layoutLayoutRouteChildren {
  pagesHomeRoute: typeof pagesHomeRoute
  pagesDemoRoute: typeof pagesDemoRoute
}

const layoutLayoutRouteChildren: layoutLayoutRouteChildren = {
  pagesHomeRoute: pagesHomeRoute,
  pagesDemoRoute: pagesDemoRoute,
}

const layoutLayoutRouteWithChildren = layoutLayoutRoute._addFileChildren(
  layoutLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof layoutLayoutRouteWithChildren
  '/': typeof pagesHomeRoute
  '/demo': typeof pagesDemoRoute
}

export interface FileRoutesByTo {
  '/': typeof pagesHomeRoute
  '/demo': typeof pagesDemoRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_Layout': typeof layoutLayoutRouteWithChildren
  '/_Layout/': typeof pagesHomeRoute
  '/_Layout/demo': typeof pagesDemoRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/demo'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/demo'
  id: '__root__' | '/_Layout' | '/_Layout/' | '/_Layout/demo'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  layoutLayoutRoute: typeof layoutLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  layoutLayoutRoute: layoutLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "routing/root.tsx",
      "children": [
        "/_Layout"
      ]
    },
    "/_Layout": {
      "filePath": "layout/Layout.tsx",
      "children": [
        "/_Layout/",
        "/_Layout/demo"
      ]
    },
    "/_Layout/": {
      "filePath": "pages/Home.tsx",
      "parent": "/_Layout"
    },
    "/_Layout/demo": {
      "filePath": "pages/Demo.tsx",
      "parent": "/_Layout"
    }
  }
}
ROUTE_MANIFEST_END */
