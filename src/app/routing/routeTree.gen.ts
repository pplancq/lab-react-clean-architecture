/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './Root'
import { Route as appLayoutLayoutImport } from './../layout/Layout'
import { Route as appPagesDemoImport } from './../pages/Demo'
import { Route as appPagesHomeImport } from './../pages/Home'

// Create/Update Routes

const appLayoutLayoutRoute = appLayoutLayoutImport.update({
  id: '/_Layout',
  getParentRoute: () => rootRoute,
} as any)

const appPagesDemoRoute = appPagesDemoImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => appLayoutLayoutRoute,
} as any)

const appPagesHomeRoute = appPagesHomeImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appLayoutLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_Layout': {
      id: '/_Layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof appLayoutLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_Layout/': {
      id: '/_Layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appPagesHomeImport
      parentRoute: typeof appLayoutLayoutImport
    }
    '/_Layout/demo': {
      id: '/_Layout/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof appPagesDemoImport
      parentRoute: typeof appLayoutLayoutImport
    }
  }
}

// Create and export the route tree

interface appLayoutLayoutRouteChildren {
  appPagesHomeRoute: typeof appPagesHomeRoute
  appPagesDemoRoute: typeof appPagesDemoRoute
}

const appLayoutLayoutRouteChildren: appLayoutLayoutRouteChildren = {
  appPagesHomeRoute: appPagesHomeRoute,
  appPagesDemoRoute: appPagesDemoRoute,
}

const appLayoutLayoutRouteWithChildren = appLayoutLayoutRoute._addFileChildren(
  appLayoutLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof appLayoutLayoutRouteWithChildren
  '/': typeof appPagesHomeRoute
  '/demo': typeof appPagesDemoRoute
}

export interface FileRoutesByTo {
  '/': typeof appPagesHomeRoute
  '/demo': typeof appPagesDemoRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_Layout': typeof appLayoutLayoutRouteWithChildren
  '/_Layout/': typeof appPagesHomeRoute
  '/_Layout/demo': typeof appPagesDemoRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/demo'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/demo'
  id: '__root__' | '/_Layout' | '/_Layout/' | '/_Layout/demo'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  appLayoutLayoutRoute: typeof appLayoutLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  appLayoutLayoutRoute: appLayoutLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "app/routing/Root.tsx",
      "children": [
        "/_Layout"
      ]
    },
    "/_Layout": {
      "filePath": "app/layout/Layout.tsx",
      "children": [
        "/_Layout/",
        "/_Layout/demo"
      ]
    },
    "/_Layout/": {
      "filePath": "app/pages/Home.tsx",
      "parent": "/_Layout"
    },
    "/_Layout/demo": {
      "filePath": "app/pages/Demo.tsx",
      "parent": "/_Layout"
    }
  }
}
ROUTE_MANIFEST_END */
