/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as appLayoutLayoutRouteImport } from './../layout/Layout';
import { Route as appPagesDemoRouteImport } from './../pages/Demo';
import { Route as appPagesHomeRouteImport } from './../pages/Home';
import { Route as rootRouteImport } from './Root';

const appLayoutLayoutRoute = appLayoutLayoutRouteImport.update({
  id: '/_Layout',
  getParentRoute: () => rootRouteImport,
} as any)
const appPagesDemoRoute = appPagesDemoRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => appLayoutLayoutRoute,
} as any)
const appPagesHomeRoute = appPagesHomeRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appLayoutLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appPagesHomeRoute
  '/demo': typeof appPagesDemoRoute
}
export interface FileRoutesByTo {
  '/': typeof appPagesHomeRoute
  '/demo': typeof appPagesDemoRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_Layout': typeof appLayoutLayoutRouteWithChildren
  '/_Layout/': typeof appPagesHomeRoute
  '/_Layout/demo': typeof appPagesDemoRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/demo'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/demo'
  id: '__root__' | '/_Layout' | '/_Layout/' | '/_Layout/demo'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appLayoutLayoutRoute: typeof appLayoutLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_Layout': {
      id: '/_Layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof appLayoutLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_Layout/demo': {
      id: '/_Layout/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof appPagesDemoRouteImport
      parentRoute: typeof appLayoutLayoutRoute
    }
    '/_Layout/': {
      id: '/_Layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appPagesHomeRouteImport
      parentRoute: typeof appLayoutLayoutRoute
    }
  }
}

interface appLayoutLayoutRouteChildren {
  appPagesHomeRoute: typeof appPagesHomeRoute
  appPagesDemoRoute: typeof appPagesDemoRoute
}

const appLayoutLayoutRouteChildren: appLayoutLayoutRouteChildren = {
  appPagesHomeRoute: appPagesHomeRoute,
  appPagesDemoRoute: appPagesDemoRoute,
}

const appLayoutLayoutRouteWithChildren = appLayoutLayoutRoute._addFileChildren(
  appLayoutLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appLayoutLayoutRoute: appLayoutLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
